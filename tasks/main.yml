---
- name: include variable overrides
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "vars/{{ ansible_distribution }}.yml"
        - "vars/{{ ansible_os_family }}.yml"
        - "vars/main.yml"

- name: install package requirements
  ansible.builtin.package:
    name: "{{ acme_certificate_packages }}"

- name: install pip requirements
  ansible.builtin.pip:
    name:
      - dnspython
      - cryptography
  changed_when: false

- name: create acme group
  ansible.builtin.group:
    name: "{{ acme_certificate_group }}"

- name: add users to acme group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "{{ acme_certificate_group }}"
    append: yes
  loop: "{{ acme_certificate_group_members | flatten(levels=1) }}"

- name: create acme folders
  ansible.builtin.file:
    path: "{{ item }}"
    mode: 0755
    state: directory
    group: "{{ acme_certificate_group }}"
  loop:
    - "{{ acme_certificate_certdir }}"
    - "{{ acme_certificate_keydir }}"

- name: create account key
  community.crypto.openssl_privatekey:
    path: "{{ acme_certificate_account_keyfile }}"
    owner: root
    group: "{{ acme_certificate_group }}"
    mode: 0640

- name: create domain key
  community.crypto.openssl_privatekey:
    path: "{{ _acme_certificate_domain_keyfile }}"
    owner: root
    group: "{{ acme_certificate_group }}"
    mode: 0640

- name: create csr
  community.crypto.openssl_csr:
    path: "{{ _acme_certificate_domain_csrfile }}"
    privatekey_path: "{{ _acme_certificate_domain_keyfile }}"
    common_name: "{{ acme_certificate_domain }}"

- name: create acme challenge
  community.crypto.acme_certificate:
    account_key: "{{ acme_certificate_account_keyfile }}"
    challenge: dns-01
    csr: "{{ _acme_certificate_domain_csrfile }}"
    dest: "{{ _acme_certificate_domain_crtfile }}"
    fullchain_dest: "{{ _acme_certificate_domain_chainfile }}"
    terms_agreed: yes
    acme_version: "{{ acme_certificate_api_version }}"
    acme_directory: "{{ acme_certificate_directory }}"
  register: acme_certificate_challenge

- name: validate acme certificate
  when: acme_certificate_challenge is changed
  block:
    - name: create cloudflare dns challenge record
      community.general.cloudflare_dns:
        zone: "{{ acme_certificate_zone }}"
        type: TXT
        state: present
        record: "{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]['dns-01']['resource'] }}.{{ acme_certificate_domain }}"
        value: '"{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["resource_value"] }}"'
        ttl: "{{ acme_certificate_challenge_ttl }}"
        api_token: "{{ acme_certificate_cf_account_token }}"

    - name: wait for txt record replication
      ansible.builtin.pause:
        seconds: "{{ acme_certificate_challenge_wait }}"

    - name: validate challenge
      community.crypto.acme_certificate:
        account_key: "{{ acme_certificate_account_keyfile }}"
        challenge: dns-01
        csr: "{{ _acme_certificate_domain_csrfile }}"
        dest: "{{ _acme_certificate_domain_crtfile }}"
        fullchain_dest: "{{ _acme_certificate_domain_chainfile }}"
        data: "{{ acme_certificate_challenge }}"
        terms_agreed: yes
        acme_version: "{{ acme_certificate_api_version }}"
        acme_directory: "{{ acme_certificate_directory }}"
      delay: "{{ acme_certificate_challenge_ttl }}"

  always:
    - name: delete cloudflare dns challenge record
      community.general.cloudflare_dns:
        zone: "{{ acme_certificate_zone }}"
        type: TXT
        state: absent
        record: "{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]['dns-01']['resource'] }}.{{ acme_certificate_domain }}"
        value: '"{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["resource_value"] }}"'
        ttl: "{{ acme_certificate_challenge_ttl }}"
        api_token: "{{ acme_certificate_cf_account_token }}"

- name: retrieve acme root ca file
  ansible.builtin.get_url:
    url: "{{ acme_certificate_caurl }}"
    dest: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
    mode: 0644

- name: retrieve acme intermediate ca file
  ansible.builtin.get_url:
    url: "{{ acme_certificate_intcaurl }}"
    dest: "{{ acme_certificate_certdir }}/{{ _acme_certificate_intcafile }}"
    mode: 0644

- name: configure local certificate chain
  block:
    - name: create acme ca root dir
      ansible.builtin.file:
        state: directory
        dest: "{{ acme_certificate_storedir }}"

    - name: copy acme root ca file to trust store
      ansible.builtin.copy:
        mode: preserve
        remote_src: yes
        src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
        dest: "{{ acme_certificate_storedir }}/{{ _acme_certificate_cafile }}"

    - name: update ca certificates
      ansible.builtin.command: update-ca-certificates
      changed_when: false
      when: ansible_os_family == 'Debian'

    - name: update ca certificates
      ansible.builtin.command: update-ca-trust extract
      changed_when: false
      when: ansible_os_family == 'RedHat'

  when: acme_certificate_add_ca

- name: set certificate file link
  ansible.builtin.file:
    state: link
    src: "{{ _acme_certificate_domain_crtfile }}"
    dest: "{{ acme_certificate_file }}"
  when: acme_certificate_file is defined

- name: set certificate chain link
  ansible.builtin.file:
    state: link
    src: "{{ _acme_certificate_domain_chainfile }}"
    dest: "{{ acme_certificate_chainfile }}"
  when: acme_certificate_chainfile is defined

- name: set certificate key link
  ansible.builtin.file:
    state: link
    src: "{{ _acme_certificate_domain_keyfile }}"
    dest: "{{ acme_certificate_keyfile }}"
  when: acme_certificate_keyfile is defined

- name: set ca file link
  ansible.builtin.file:
    state: link
    src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
    dest: "{{ acme_certificate_cafile }}"
  when: acme_certificate_cafile is defined

- name: set intca file link
  ansible.builtin.file:
    state: link
    src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_intcafile }}"
    dest: "{{ acme_certificate_intcafile }}"
  when: acme_certificate_intcafile is defined
